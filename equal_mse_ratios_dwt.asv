function ratios = equal_mse_ratios_dwt(X, num_stages)
    X_test = zeros(size(X)); 
    n = num_stages;                     
    impulse = 100; 
    Y = nleveldwt(X_test, n);
    energy = ones(3,n+1); % make ones instead of zeros so that we don't 
                           % divide by zero in empty slots when calculating
                           % ratios
    % number of sub-images is 3n+1
    m = length(Y)/2;
    for i = 1:n
        Y(0.5*2, 1.5*m) = impulse;
        Z = nlevelidwt(Y, n); 
        energy(1,i) = sum(Z(:).^2); 
        Y(0.5*m, 1.5*m) = 0; 
        
        Y(1.5*m, 0.5*m) = impulse;
        Z = nlevelidwt(Y, n); 
        energy(2,i) = sum(Z(:).^2); 
        Y(1.5*m, 0.5*m) = 0;
        
        Y(1.5*m, 1.5*m) = impulse;
        Z = nlevelidwt(Y, n); 
        energy(3,i) = sum(Z(:).^2); 
        Y(1.5*m, 1.5*m) = 0;
        m=m/2; 
    end 
    
    % arbitrarily take all ratios relative to final low pass image
    ratios = 1 ./ sqrt(energy./energy(1,n+1)); 
    
    
    
    % reconstruction algorithm depends on size of pyramid 
    switch num_stages
        case 0 
            ratios = 1;
        case 1
            z0 = py1dec(x1,y0_impulse,h);
            energy0 = sum(z0(:).^2);
            ratios = 1;
            
        case 2
            z0 = py2dec(x2,y0_impulse,y1,h);
            z1 = py2dec(x2,y0,y1_impulse,h);
            energy0 = sum(z0(:).^2);
            energy1 = sum(z1(:).^2);
            ratios = 1./sqrt([energy0 energy1]./energy0);
            
        case 3
            z0 = py3dec(x3,y0_impulse,y1,y2,h);
            z1 = py3dec(x3,y0,y1_impulse,y2,h);
            z2 = py3dec(x3,y0,y1,y2_impulse,h);
            energy0 = sum(z0(:).^2);
            energy1 = sum(z1(:).^2);
            energy2 = sum(z2(:).^2);
            ratios = 1./sqrt([energy0 energy1 energy2]./energy0);
          
        case 4
            z0 = py4dec(x4,y0_impulse,y1,y2,y3,h);
            z1 = py4dec(x4,y0,y1_impulse,y2,y3,h);
            z2 = py4dec(x4,y0,y1,y2_impulse,y3,h);
            z3 = py4dec(x4,y0,y1,y2,y3_impulse,h);
            energy0 = sum(z0(:).^2);
            energy1 = sum(z1(:).^2);
            energy2 = sum(z2(:).^2);
            energy3 = sum(z3(:).^2);
            ratios = 1./sqrt([energy0 energy1 energy2 energy3]./energy0);
            
        otherwise
    end 

    return 
    
    
% ideally we expect that layer < num_stages
% I assume we let the impulse equal step size so that after quantisation
% the impulse has size of 1

% it seems that we are assuming the proportionality constant between the
% impulse size in a layer and the energy of the filtered pulse in the
% reconstructed image is the same regardless of the layer the pulse is
% placed in - but perhaps not necessarily the same across different pyramid
% sizes -  maybe the ratios between layers is different across pyramid
% sizes 
% I am treating y0 and x1 as the same layer, y1 and x2, etc. 

% apparently impulses in higher stages contribute more to energy in
% reconstruction - hence require smaller impulses for equal MSE - i.e. -
% the elements of the ratios matrix get progressively smaller 

